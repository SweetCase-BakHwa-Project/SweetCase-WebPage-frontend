[{"D:\\projects\\SweetCase-WebPage-frontend\\app\\src\\index.tsx":"1","D:\\projects\\SweetCase-WebPage-frontend\\app\\src\\App.tsx":"2","D:\\projects\\SweetCase-WebPage-frontend\\app\\src\\pages\\SweetCase.tsx":"3","D:\\projects\\SweetCase-WebPage-frontend\\app\\src\\pages\\Home.tsx":"4","D:\\projects\\SweetCase-WebPage-frontend\\app\\src\\pages\\BakhwaProject.tsx":"5","D:\\projects\\SweetCase-WebPage-frontend\\app\\src\\components\\footer.tsx":"6","D:\\projects\\SweetCase-WebPage-frontend\\app\\src\\components\\bakhwa\\Navbar.tsx":"7","D:\\projects\\SweetCase-WebPage-frontend\\app\\src\\pages\\bakhwa\\AlbumPage.tsx":"8","D:\\projects\\SweetCase-WebPage-frontend\\app\\src\\pages\\bakhwa\\MusicSheetsPage.tsx":"9","D:\\projects\\SweetCase-WebPage-frontend\\app\\src\\components\\bakhwa\\Album.tsx":"10","D:\\projects\\SweetCase-WebPage-frontend\\app\\src\\pages\\bakhwa\\AlbumInfoPage.tsx":"11","D:\\projects\\SweetCase-WebPage-frontend\\app\\src\\components\\bakhwa\\Sheet.tsx":"12","D:\\projects\\SweetCase-WebPage-frontend\\app\\src\\components\\bakhwa\\TrackSong.tsx":"13","D:\\projects\\SweetCase-WebPage-frontend\\app\\src\\components\\mainNavbar.tsx":"14"},{"size":123,"mtime":1609640474480,"results":"15","hashOfConfig":"16"},{"size":1147,"mtime":1609914050211,"results":"17","hashOfConfig":"16"},{"size":1518,"mtime":1610723836034,"results":"18","hashOfConfig":"16"},{"size":11017,"mtime":1610733274365,"results":"19","hashOfConfig":"16"},{"size":2215,"mtime":1610029062372,"results":"20","hashOfConfig":"16"},{"size":1879,"mtime":1610723763260,"results":"21","hashOfConfig":"16"},{"size":1547,"mtime":1610077881964,"results":"22","hashOfConfig":"16"},{"size":4374,"mtime":1610040606317,"results":"23","hashOfConfig":"16"},{"size":3199,"mtime":1610041270423,"results":"24","hashOfConfig":"16"},{"size":1824,"mtime":1609878679128,"results":"25","hashOfConfig":"16"},{"size":8368,"mtime":1610042926389,"results":"26","hashOfConfig":"16"},{"size":1146,"mtime":1610041386787,"results":"27","hashOfConfig":"16"},{"size":2311,"mtime":1610041401235,"results":"28","hashOfConfig":"16"},{"size":1868,"mtime":1610733346149,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"94d1v5",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\projects\\SweetCase-WebPage-frontend\\app\\src\\index.tsx",[],["62","63"],"D:\\projects\\SweetCase-WebPage-frontend\\app\\src\\App.tsx",[],"D:\\projects\\SweetCase-WebPage-frontend\\app\\src\\pages\\SweetCase.tsx",["64"],"D:\\projects\\SweetCase-WebPage-frontend\\app\\src\\pages\\Home.tsx",["65","66","67","68","69","70","71","72","73"],"D:\\projects\\SweetCase-WebPage-frontend\\app\\src\\pages\\BakhwaProject.tsx",[],"D:\\projects\\SweetCase-WebPage-frontend\\app\\src\\components\\footer.tsx",[],"D:\\projects\\SweetCase-WebPage-frontend\\app\\src\\components\\bakhwa\\Navbar.tsx",["74"],"import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst NavTitle = styled.div`\r\n    color: white;\r\n    font-size: 25px;\r\n`\r\nconst Navbar: React.FC<{\r\n    album: string,\r\n    musicSheet: string\r\n}> = ({\r\n    album,\r\n    musicSheet\r\n}) => {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"/bakhwaproject\"><NavTitle>白花 Project</NavTitle></a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                        <a className={album} href=\"/bakhwaproject/albums\">Albums</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className={musicSheet} href=\"/bakhwaproject/musicsheets\">MusicSheets</a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","D:\\projects\\SweetCase-WebPage-frontend\\app\\src\\pages\\bakhwa\\AlbumPage.tsx",[],"D:\\projects\\SweetCase-WebPage-frontend\\app\\src\\pages\\bakhwa\\MusicSheetsPage.tsx",[],"D:\\projects\\SweetCase-WebPage-frontend\\app\\src\\components\\bakhwa\\Album.tsx",[],"D:\\projects\\SweetCase-WebPage-frontend\\app\\src\\pages\\bakhwa\\AlbumInfoPage.tsx",["75","76"],"import Helmet from 'react-helmet';\r\nimport styled from 'styled-components';\r\n\r\n\r\nimport React, {useState} from 'react';\r\nimport { generatePath, RouteComponentProps } from \"react-router-dom\";\r\n\r\nimport Navbar from \"../../components/bakhwa/Navbar\";\r\nimport Footer from '../../components/footer';\r\nimport TrackSong from \"../../components/bakhwa/TrackSong\";\r\n\r\nimport Wallpaper from \"../../img/bakhwa-wallpaper.jpg\";\r\nimport axios from 'axios';\r\n\r\nimport HostData from \"../../config.json\";\r\n\r\ninterface AlbumInfoInterface  {\r\n    albumName: string;\r\n}\r\nclass ComponentAlbumInfo {\r\n    name:               string;\r\n    cover:              string;\r\n    downloadLink:       string;\r\n    soundCloudLink:     string;\r\n    createDate:         string;\r\n    type:               string;\r\n    genre:              string;\r\n    songListComponent: JSX.Element[];\r\n\r\n    constructor(name:       string, \r\n            cover:          string,\r\n            downloadLink:   string, \r\n            soundCloudLink: string,\r\n            createDate:     string,\r\n            type:           string,\r\n            genre:          string,\r\n            songListComponent: JSX.Element[]) {\r\n\r\n        this.name               = name;\r\n        this.downloadLink       = downloadLink;\r\n        this.soundCloudLink     = soundCloudLink;\r\n        this.songListComponent  = songListComponent;\r\n        this.createDate         = createDate;\r\n        this.type               = type;\r\n        this.genre              = genre;\r\n        this.cover              = cover;\r\n    }\r\n}\r\nclass ComponentAlbumInfoBuilder {\r\n    name:               string;\r\n    cover:              string;\r\n    downloadLink:       string;\r\n    soundCloudLink:     string;\r\n    createDate:         string;\r\n    type:               string;\r\n    genre:              string;\r\n    songListComponent: JSX.Element[];\r\n    \r\n    constructor() {\r\n        this.name               = \"\";\r\n        this.cover              = \"\";\r\n        this.downloadLink       = \"\";\r\n        this.soundCloudLink     = \"\";\r\n        this.createDate         = \"\";\r\n        this.type               = \"\";\r\n        this.genre              = \"\";\r\n        this.songListComponent  = []\r\n    }\r\n    \r\n    setName(name: string): ComponentAlbumInfoBuilder                        { this.name = name; return this; };\r\n    setCover(cover: string): ComponentAlbumInfoBuilder                      { this.cover = cover; return this; };\r\n    setDownloadLink(downloadLink: string): ComponentAlbumInfoBuilder        { this.downloadLink = downloadLink; return this; };\r\n    setSoundCloudLink(soundCloudLink: string): ComponentAlbumInfoBuilder    { this.soundCloudLink = soundCloudLink; return this; };\r\n    setCreateDate(createDate: string): ComponentAlbumInfoBuilder            { this.createDate = createDate; return this; }\r\n    setType(type: string): ComponentAlbumInfoBuilder                        { this.type = type; return this; }\r\n    setGenre(genre: string): ComponentAlbumInfoBuilder                       { this.genre = genre; return this; }\r\n    setSongListComponent(songListComponent: JSX.Element[]): ComponentAlbumInfoBuilder  { this.songListComponent = songListComponent; return this; }; \r\n\r\n    build() { \r\n        return new ComponentAlbumInfo(\r\n            this.name,\r\n            this.cover,\r\n            this.downloadLink,\r\n            this.soundCloudLink,\r\n            this.createDate,\r\n            this.type,\r\n            this.genre,\r\n            this.songListComponent\r\n        )\r\n    }\r\n\r\n}\r\nconst AlbumInfoPage = ({ match }: RouteComponentProps<AlbumInfoInterface>) => {\r\n\r\n    var albumName = match.params.albumName;\r\n\r\n    const [albumInfo, setAlbumInfo] = useState<ComponentAlbumInfo>();\r\n\r\n    if(albumInfo === undefined) {\r\n        axios.post(HostData.bakhwaHost.host+HostData.bakhwaHost.api.get_album_info, {\r\n            \"album_name\": albumName\r\n        }).then(\r\n            data => {\r\n                var _albumInfo = data.data.data;\r\n                var songComponents: JSX.Element[] = [];\r\n\r\n                for(var i = 0; i < _albumInfo.song_list.length; i++) {\r\n                    songComponents.push(\r\n                        <TrackSong key={i} trackNumber={i+1} musicName={_albumInfo.song_list[i].name} musicUrl={_albumInfo.song_list[i].link} />\r\n                    );\r\n                }\r\n                setAlbumInfo(new ComponentAlbumInfoBuilder()\r\n                                .setName(albumName)\r\n                                .setCover(_albumInfo.album_cover)\r\n                                .setDownloadLink(_albumInfo.album_download_link)\r\n                                .setSoundCloudLink(_albumInfo.soundcloud_link)\r\n                                .setSongListComponent(songComponents)\r\n                                .setCreateDate(_albumInfo.create_date)\r\n                                .setType(_albumInfo.album_type)\r\n                                .setGenre(_albumInfo.genre)\r\n                                .build()\r\n                                );\r\n                \r\n            }\r\n        ).catch(e => {\r\n            // Error\r\n            window.location.href = \"https://www.google.com\";\r\n        });\r\n    }\r\n    \r\n    return (\r\n        <Main>\r\n            <Helmet>\r\n                <title>白花 Project-Albums</title>\r\n            </Helmet>\r\n                <Navbar \r\n                    album=\"nav-link active\"\r\n                    musicSheet=\"nav-link\"\r\n                />\r\n            <Body>\r\n                <SummaryLayer>\r\n                    <SummaryImgLayer src={albumInfo?.cover} />\r\n                    <SummaryTextLayer>\r\n                        <Summary>\r\n                            <h2>{albumName}</h2>\r\n                            <p>Create Date: {albumInfo?.createDate}</p>\r\n                            <p>Ganre: {albumInfo?.genre}</p>\r\n                            <p>Type: {albumInfo?.type}</p>\r\n                        </Summary>\r\n                        <ButtonLayer>\r\n                            <Btn><button className=\"btn btn-primary\" onClick={() =>{\r\n                                if(albumInfo !== undefined) {\r\n                                    window.open(\r\n                                        albumInfo.downloadLink,\r\n                                        \"_blank\"\r\n                                    );\r\n                                }\r\n                            }} >Download</button></Btn>\r\n                            <Btn><button className=\"btn btn-warning\" onClick={() => {\r\n                                if(albumInfo !== undefined) {\r\n                                    window.open(\r\n                                        albumInfo.soundCloudLink,\r\n                                        \"_blank\"\r\n                                    );\r\n                                }\r\n                            }}>Soundcloud</button></Btn>\r\n                        </ButtonLayer>\r\n                    </SummaryTextLayer>\r\n                </SummaryLayer>\r\n                <MainLine />\r\n                <TrackList>\r\n                    <h2>Track List</h2>\r\n                    {albumInfo?.songListComponent}\r\n                </TrackList>\r\n            </Body>\r\n            <Footer backgroundcolor=\"#000000\" />\r\n        </Main>\r\n    );\r\n}\r\nconst Main = styled.div`\r\nwidth: 100%;\r\nheight: 100%;\r\nfont-family: 'Nanum Myeongjo', serif;\r\nbackground-image: url(${Wallpaper});\r\n`\r\nconst Body = styled.div`\r\nmargin-top: 3%;\r\nwidth: auto;\r\nheight: auto;\r\noverflow: hidden;\r\nbackground-color: rgba(255, 255, 255, 0.7);\r\nmargin-left: 15%;\r\nmargin-right: 15%;\r\npadding-left: 1%;\r\n`\r\nconst SummaryLayer = styled.div`\r\n    width: 100%;\r\n    height: auto;\r\n`\r\nconst MainLine = styled.div`\r\n    clear: both;\r\n    width: 95%;\r\n    height: 2px;\r\n    background-color: black;\r\n    margin-bottom: 10px;\r\n`\r\nconst SummaryImgLayer = styled.img`\r\nwidth: 30%;\r\nmargin-bottom: 2%;\r\nmargin-left: 2%;\r\nmargin-right: 2%;\r\nfloat: left;\r\n`\r\nconst SummaryTextLayer = styled.div`\r\n    padding-top: 2%;\r\n    width 100%;\r\n    height: auto;\r\n    margin-top: 2%;\r\n    margin-right: 1%;\r\n`\r\nconst Summary = styled.div`\r\n    position: alsolute;\r\n    top: 0;\r\n`\r\nconst ButtonLayer = styled.div`\r\n    width: 100%;\r\n`\r\nconst Btn = styled.div`\r\n    margin-right: 10px;\r\n    float: left;\r\n`\r\n\r\nconst TrackList = styled.div`\r\n    margin-left: 2%;\r\n`\r\nconst TrackListLi = styled.div`\r\n`\r\nexport default AlbumInfoPage;","D:\\projects\\SweetCase-WebPage-frontend\\app\\src\\components\\bakhwa\\Sheet.tsx",[],"D:\\projects\\SweetCase-WebPage-frontend\\app\\src\\components\\bakhwa\\TrackSong.tsx",["77"],"import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport AudioPlayer from 'react-h5-audio-player';\r\nimport 'react-h5-audio-player/lib/styles.css';\r\n\r\nconst TrackSong: React.FC<{\r\n    trackNumber: number,\r\n    musicName: string,\r\n    musicUrl: string\r\n}> = ({ trackNumber, musicName, musicUrl }) => {\r\n\r\n    const [isAudioPlayVisible, setIsAudioPlayVisible] = useState({display: \"none\", playButtonClassNames: \"btn btn-primary\"});\r\n\r\n    // Audio Player\r\n    const AudioLayer = styled.div`\r\n        display: ${isAudioPlayVisible.display};\r\n    `\r\n    // When Click PlayButton\r\n    const playBtnEvent = () => {\r\n        if(isAudioPlayVisible.display === \"none\") {\r\n            setIsAudioPlayVisible(isAudioPlayVisible => ({\r\n                display: \"block\",\r\n                playButtonClassNames: \"btn btn-outline-primary\"\r\n            }));\r\n        } else {\r\n            setIsAudioPlayVisible(isAudioPlayVisible => ({\r\n                display: \"none\",\r\n                playButtonClassNames: \"btn btn-primary\"\r\n            }));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Body>\r\n            <SummaryLayer>\r\n                <TrackNumber>{trackNumber}</TrackNumber>\r\n                <Title>{musicName}</Title>\r\n                <ButtonLayer>\r\n                    <ButtonDiv><button type=\"button\" className={isAudioPlayVisible.playButtonClassNames} onClick={playBtnEvent}>Play</button></ButtonDiv>\r\n                </ButtonLayer>\r\n            </SummaryLayer>\r\n            <AudioLayer><AudioPlayer src={musicUrl} /></AudioLayer>\r\n            \r\n        </Body>\r\n    );\r\n}\r\nconst Body = styled.li`\r\n    width: 90%;\r\n    height: auto;\r\n    background-color: white;\r\n    list-style: none;\r\n    padding-top: 15px;\r\n    padding-left: 10px;\r\n    padding-right: 10px;\r\n    margin-bottom: 15px;\r\n    box-shadow: 7px 5px 5px gray;\r\n`\r\nconst SummaryLayer = styled.div`\r\n    height: 50px;\r\n`\r\nconst TrackNumber = styled.h5`\r\n    float: left;\r\n    padding-top: 5px;\r\n    margin-left: 10px;\r\n    color: red;\r\n`\r\nconst Title = styled.h5`\r\n    float: left;\r\n    padding-top: 5px;\r\n    margin-left: 10px;\r\n`\r\nconst ButtonLayer = styled.div`\r\n`\r\nconst ButtonDiv = styled.div`\r\n    float: right;\r\n    margin-left: 15px;\r\n`\r\nconst MusicLayer = styled.div`\r\n    clear: both;\r\n`\r\nexport default TrackSong;","D:\\projects\\SweetCase-WebPage-frontend\\app\\src\\components\\mainNavbar.tsx",[],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":56,"column":7,"nodeType":"84","messageId":"85","endLine":56,"endColumn":17},{"ruleId":"82","severity":1,"message":"86","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":25},{"ruleId":"82","severity":1,"message":"87","line":4,"column":9,"nodeType":"84","messageId":"85","endLine":4,"endColumn":13},{"ruleId":"88","severity":1,"message":"89","line":35,"column":28,"nodeType":"90","endLine":35,"endColumn":62},{"ruleId":"91","severity":1,"message":"92","line":59,"column":33,"nodeType":"90","endLine":59,"endColumn":143},{"ruleId":"91","severity":1,"message":"92","line":64,"column":37,"nodeType":"90","endLine":64,"endColumn":157},{"ruleId":"91","severity":1,"message":"92","line":88,"column":37,"nodeType":"90","endLine":88,"endColumn":151},{"ruleId":"91","severity":1,"message":"92","line":93,"column":37,"nodeType":"90","endLine":93,"endColumn":149},{"ruleId":"91","severity":1,"message":"92","line":110,"column":44,"nodeType":"90","endLine":110,"endColumn":97},{"ruleId":"91","severity":1,"message":"92","line":111,"column":48,"nodeType":"90","endLine":111,"endColumn":110},{"ruleId":"82","severity":1,"message":"87","line":3,"column":10,"nodeType":"84","messageId":"85","endLine":3,"endColumn":14},{"ruleId":"82","severity":1,"message":"93","line":6,"column":10,"nodeType":"84","messageId":"85","endLine":6,"endColumn":22},{"ruleId":"82","severity":1,"message":"94","line":236,"column":7,"nodeType":"84","messageId":"85","endLine":236,"endColumn":18},{"ruleId":"82","severity":1,"message":"95","line":79,"column":7,"nodeType":"84","messageId":"85","endLine":79,"endColumn":17},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"@typescript-eslint/no-unused-vars","'FooterFont' is assigned a value but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Link' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","'generatePath' is defined but never used.","'TrackListLi' is assigned a value but never used.","'MusicLayer' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]